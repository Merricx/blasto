#!/usr/bin/env python
#-*-coding: utf-8-*-
###################################################
#					Blasto 						  #
#			Written by : Merricx                  #
#       (https://github.com/merricx/blasto)       #
###################################################

import argparse, sys, curses, time, random, re
import modules.core as core

version = "v0.1.0"

def args_parse():

	parser = argparse.ArgumentParser(
		usage='%(prog)s [options]')
	parser.add_argument(
		'-i',
		metavar='FILE',
		help='Input ciphertext from file. If not defined, ciphertext will be inputed manually',
		type=argparse.FileType('r'))
	parser.add_argument(
		'-o',
		metavar='FILE',
		help='Save output result to file',
		type=argparse.FileType('w'))
	parser.add_argument(
		'--cipher',
		metavar='CIPHERTYPE',
		help='Set cipher type. If not defined, it will be prompted to select manually. Available: (subs, grille)',
		type=str,
		choices=['subs','grille'])
	parser.add_argument(
		'-s','--sleep',
		metavar='SEC',
		help='Set interval time between iterations to avoid max CPU usage (0 to none). (Default=0.0001)',
		default=0.0001,
		type=float)
	parser.add_argument(
		'-c','--count',
		metavar='NUM',
		help='Set iterations. (Default=1000)',
		default=2000,
		type=int)
	parser.add_argument(
		'-l',
		metavar='LANGUAGE',
		help='Set Plaintext language for Quadgram statistic. Available: (en, es, de). (Default=en)',
		default='en',
		type=str,
		choices=['en','es','de']
		)

	return parser.parse_args()


def print_cipher_type():

	cipher_type_txt = "\n1. Substitution Cipher\n2. Turning Grille Cipher\n"

	print(cipher_type_txt)
	cipher_type = raw_input("Select Cipher Type : ")

	if cipher_type == '1':
		return 'subs'
	elif cipher_type == '2':
		return 'grille'
	else:
		print "[ERROR]: Invalid selection"
		return None

if __name__ == "__main__":

	args = args_parse()

	if args.sleep < 0:
		print "[ERROR]: Invalid value of argument -s (sleep)"
		sys.exit()
	if args.count < 0:
		print "[ERROR]: Invalid value of argument -c (count)"
		sys.exit()
	if args.cipher == None:
		while args.cipher == None:
			args.cipher = print_cipher_type()
	if args.i == None:
		ciphertext = raw_input("Enter ciphertext : ")
	else:
		ciphertext = args.i.read()

	if args.cipher == 'grille':
		valid_grille = [16,36,64,100,224]
		if len(re.sub("\s+","",ciphertext)) not in valid_grille:
			print "[ERROR]: Invalid length. Blasto currently only support even size of grille up to 12x12."
			sys.exit()

	try:
		stdscr = curses.initscr()
		if stdscr.getmaxyx()[0] < 18 or stdscr.getmaxyx()[1] < 65:
			stdscr.endwin()
			print "[ERROR]: Windows size is too small"
			sys.exit()
		curses.noecho()
		curses.cbreak()

		stdscr.addstr(0,20,"______________             _____       ",curses.A_BOLD)
		stdscr.addstr(1,20,"___  __ )__  /_____ _________  /______ ",curses.A_BOLD)
		stdscr.addstr(2,20,"__  __  |_  /_  __ `/_  ___/  __/  __ \\",curses.A_BOLD)
		stdscr.addstr(3,20,"_  /_/ /_  / / /_/ /_(__  )/ /_ / /_/ /",curses.A_BOLD)
		stdscr.addstr(4,20,"/_____/ /_/  \__,_/ /____/ \__/ \____/ ",curses.A_BOLD)
		stdscr.addstr(6,15,"=================================================")
		stdscr.addstr(6,33,"Blasto "+version, curses.A_BOLD)
		stdscr.addstr(7,15,"#                   Cracking...                 #")
		stdscr.addstr(8,15,"#             Iteration : 1 (0:00:00)           #")
		stdscr.addstr(9,15,"#          Press CTRL-C to stop process         #")
		stdscr.addstr(10,15,"=================================================")

		stdscr.refresh()
		best_score = -99e99
		best_plain = ""
		start_time = time.time()
		i = 1

		while True:
			if args.cipher == 'subs' and i == 1:
				result = core.common_dict(ciphertext, args.l)
			else:
				result = core.hill_climbing(ciphertext, args.cipher, args.count, args.sleep, args.l)
			sec = time.time() - start_time
			m, s = divmod(sec, 60)
			h, m = divmod(m, 60)
			elapsed_time = "%d:%02d:%02d" % (h, m, s)
			stdscr.addstr(8,41,str(i)+" ("+str(elapsed_time)+")")
			stdscr.addstr(8,63,"#")
			stdscr.refresh()
			
			if result['score'] > best_score:
				best_score = result['score']
				best_plain = result['plain']
				stdscr.move(12,0)
				stdscr.clrtoeol()
				stdscr.addstr(12,0,"Best key   = ")
				stdscr.addstr(12,14,result['key'],curses.A_BOLD)
				stdscr.addstr(14,0,"Plain text :")
				short_plain = result['plain']
				if len(result['plain']) > 450:
					short_plain = result['plain'][0:450] + "...."
				stdscr.addstr(15,0,short_plain, curses.A_BOLD)
				stdscr.refresh()
			
			i += 1

	except KeyboardInterrupt:
		curses.nocbreak()
		curses.echo()
		curses.endwin()
		if args.o == None:
			print "Final plain text : "
			print best_plain
		else:
			args.o.write(best_plain)
			print "Plain text saved in \"" + args.o.name + "\"."
	except:
		curses.nocbreak()
		curses.echo()
		curses.endwin()
		print "[ERROR]: Unexpected error."
